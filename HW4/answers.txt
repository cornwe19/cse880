2.
   DocumentIF subclass 'ResearchPaper'
      instVarNames: #( 'name', 'published_by' )
      inDictionary: UserGlobals
      constraints: #[
         #[#name, String], 
         #[published_by, ProjectLeader]
      ]
      classmethod:ResearchPaper newName:aName, newPublisher:publisher
         |tempPaper|
         tempPaper:= self new
         tempPaper name:aName published_by:publisher
         ^tempPaper
   .

   ResearchPaper subclass 'DBResearchPaper'
      instVarNames: #( 'db_type' )
      inDictionary: UserGlobals
      constraints #[
         #[#db_type, String]
      ]
      classmethod:DBResearchPaper newName:aName, newPublisher:publisher, newType:type
         |tempPaper|
         tempPaper:= super newName:aName, newPublisher:publisher
         tempPaper db_type:type
         ^tempPaper
   .

3.
   a) SELECT ProjectName: P.name
      FROM Projects P
      WHERE EXISTS( SELECT * 
                    FROM P.work_plan T
                    WHERE EXISTS( SELECT *
                                  FROM T.participating G
                                  WHERE G.name='John'
                                )
                    OR T.leader.name='John' );

   b) SELECT Documents: ( SELECT d.name FROM P.document d )
      FROM Projects P
      WHERE EXISTS ( SELECT * 
                     FROM P.work_plan T
                     WHERE T.description_task='Database design' );

   c) SELECT UNIQUE ProjectName: P.name
      FROM Projects P, P.work_plan T
      WHERE COUNT( SELECT * 
                   FROM Articles A, A.author AA
                   WHERE T.leader.name=AA.name ) >= 10;

   d) SELECT UNIQUE ProjectName: P.name
      FROM Projects P, P.work_plan T
      WHERE EXISTS( SELECT * 
                    FROM Articles A, A.author AA
                    WHERE T.leader.name=AA.name );

4) 
   b)
      i) Consul-Employee inherits:
          - name: string (worker)
          - salary: int (employee)
          - work_address_c: string (consultant)
          - work_address_e: string (employee)
          - specialization: string (consultant)
          - emp-no: int (employee)
          - car: exp-car (redefined in consultant based on type assumption)
      ii) Distinct name invariant, Single origin invariant, Complete inheritence invariant, Domain compatibility invariant (due to consultant redefinition), Multiple inheritance Rules R1, R2 and R3, and Class hierarchy manipulation rule R10
